{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435: \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0438 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u0430 \u0442\u0440\u0435\u0445 \u0442\u0438\u043f\u043e\u0432: \u043e\u0434\u043d\u043e\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u0434\u0432\u0443\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439 \u0438 \u0442\u0440\u0435\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0432 \u0441\u0443\u0442\u043a\u0438. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435 \u0435\u0441\u0442\u044c \u0442\u0435\u043b\u0435\u0444\u043e\u043d. \u041e \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0433\u043e\u0440\u043e\u0434, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u043d \u043f\u0440\u0438\u0431\u044b\u043b, \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435, \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0447\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440. \u041e \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f: \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0433\u0434\u0435 (\u044d\u0442\u0430\u0436) \u0438 \u043a\u043e\u0433\u0434\u0430 (\u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438) \u043e\u043d \u0443\u0431\u0438\u0440\u0430\u0435\u0442. \u0421\u043b\u0443\u0436\u0430\u0449\u0438\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0443\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u0441\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u044d\u0442\u0430\u0436\u0435 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u043d\u0438 \u043d\u0435\u0434\u0435\u043b\u0438, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 \u0440\u0430\u0437\u043d\u044b\u0435 \u0434\u043d\u0438 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0443\u0431\u0438\u0440\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u044d\u0442\u0430\u0436\u0438. \u0421\u0423\u0411\u0414: PostgreSQL \u0412\u0435\u0440\u0441\u0438\u044f:. 13.2","title":"Introduction"},{"location":"#_1","text":"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0438 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u0430 \u0442\u0440\u0435\u0445 \u0442\u0438\u043f\u043e\u0432: \u043e\u0434\u043d\u043e\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u0434\u0432\u0443\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439 \u0438 \u0442\u0440\u0435\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0432 \u0441\u0443\u0442\u043a\u0438. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435 \u0435\u0441\u0442\u044c \u0442\u0435\u043b\u0435\u0444\u043e\u043d. \u041e \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0433\u043e\u0440\u043e\u0434, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u043d \u043f\u0440\u0438\u0431\u044b\u043b, \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435, \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0447\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440. \u041e \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f: \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0433\u0434\u0435 (\u044d\u0442\u0430\u0436) \u0438 \u043a\u043e\u0433\u0434\u0430 (\u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438) \u043e\u043d \u0443\u0431\u0438\u0440\u0430\u0435\u0442. \u0421\u043b\u0443\u0436\u0430\u0449\u0438\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0443\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u0441\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u044d\u0442\u0430\u0436\u0435 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u043d\u0438 \u043d\u0435\u0434\u0435\u043b\u0438, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 \u0440\u0430\u0437\u043d\u044b\u0435 \u0434\u043d\u0438 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0443\u0431\u0438\u0440\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u044d\u0442\u0430\u0436\u0438. \u0421\u0423\u0411\u0414: PostgreSQL \u0412\u0435\u0440\u0441\u0438\u044f:. 13.2","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435:"},{"location":"aim/","text":"\u0426\u0435\u043b\u0438 \u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0426\u0435\u043b\u044c: \u041f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0430\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442\u0435\u043b\u044f \u0441 10 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430\u043c\u0438, \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 \u0435\u0434\u0438\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442. \u0417\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430: \u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0438\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u044f. \u041e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Docker-compose. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 web-\u0441\u0435\u0440\u0432\u0435\u0440\u0430\u043c\u0438. \u0424\u0438\u043b\u044c\u0442\u0440\u044b \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0421\u0438\u0433\u043d\u0430\u043b\u044b \u0422\u0435\u0441\u0442\u044b Django REST Framework \u0410\u0434\u0430\u043f\u0442\u0430\u0446\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 vue.js","title":"Aim"},{"location":"aim/#_1","text":"","title":"\u0426\u0435\u043b\u0438 \u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"aim/#_2","text":"\u041f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0430\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442\u0435\u043b\u044f \u0441 10 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430\u043c\u0438, \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 \u0435\u0434\u0438\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442.","title":"\u0426\u0435\u043b\u044c:"},{"location":"aim/#_3","text":"\u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0438\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u044f. \u041e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Docker-compose. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 web-\u0441\u0435\u0440\u0432\u0435\u0440\u0430\u043c\u0438. \u0424\u0438\u043b\u044c\u0442\u0440\u044b \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0421\u0438\u0433\u043d\u0430\u043b\u044b \u0422\u0435\u0441\u0442\u044b Django REST Framework \u0410\u0434\u0430\u043f\u0442\u0430\u0446\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 vue.js","title":"\u0417\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430:"},{"location":"conclusions/","text":"\u0412\u044b\u0432\u043e\u0434\u044b \u0412 \u0445\u043e\u0434\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442 \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 \"\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" \u0431\u044b\u043b \u0441\u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0441\u0435\u0440\u0432\u0438\u0441 \u043f\u043e \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043e\u0442\u0435\u043b\u044f. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0432\u0441\u0435 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u0441\u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e 12 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043e\u043c.","title":"Conclusions"},{"location":"conclusions/#_1","text":"\u0412 \u0445\u043e\u0434\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442 \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 \"\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" \u0431\u044b\u043b \u0441\u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0441\u0435\u0440\u0432\u0438\u0441 \u043f\u043e \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043e\u0442\u0435\u043b\u044f. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0432\u0441\u0435 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u0441\u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e 12 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043e\u043c.","title":"\u0412\u044b\u0432\u043e\u0434\u044b"},{"location":"title/","text":"\u041c\u0438\u043d\u0438\u0441\u0442\u0435\u0440\u0441\u0442\u0432\u043e \u043d\u0430\u0443\u043a\u0438 \u0438 \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u043e\u0439 \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u0438 \u0444\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u043e\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0443\u0447\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435 \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u00ab\u041d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442 \u0418\u0422\u041c\u041e\u00bb \u0424\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442 \u0438\u043d\u0444\u043e\u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439 \u041a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0430 \u0442\u0435\u043c\u0443: \u00ab\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442\u0435\u043b\u044f\u00bb \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435: \u00ab\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u00bb \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0430: \u0441\u0442\u0443\u0434\u0435\u043d\u0442(\u043a\u0430) 3 \u043a\u0443\u0440\u0441\u0430 \u0418\u041a\u0422 \u0433\u0440\u0443\u043f\u043f\u044b \u041a33422 \u0410\u0431\u0440\u0430\u043c\u043e\u0432\u0430 \u0410\u043d\u043d\u0430 \u041c\u0438\u0445\u0430\u0439\u043b\u043e\u0432\u043d\u0430 \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b: \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410\u043d\u0442\u043e\u043d \u0418\u0433\u043e\u0440\u0435\u0432\u0438\u0447 \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433 2022","title":"Title"},{"location":"endpoints/endpoints/","text":"Endpoints /admins/ \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432\u043e\u0432 post - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432 /admins/:id/ \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432 update - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432 patch - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432 delete - \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432 /rooms/ \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043d\u0430\u0442 post - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u0443 /rooms/:id/ \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u0443 update - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u0443 patch - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u0443 delete - \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u0443 /clients/ \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 post - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 /clients/:id/ \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 update - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 patch - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 delete - \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 /cleanings/ \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u043e\u0432 post - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 /cleanings/:id/ \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 update - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 patch - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 delete - \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 /inhabitations/ \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f post - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u0435 /inhabitations/:id/ \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u0435 update - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u0435 patch - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u0435 delete - \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u0435","title":"Api"},{"location":"endpoints/endpoints/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/endpoints/#admins","text":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432\u043e\u0432 post - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432","title":"/admins/"},{"location":"endpoints/endpoints/#adminsid","text":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432 update - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432 patch - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432 delete - \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432","title":"/admins/:id/"},{"location":"endpoints/endpoints/#rooms","text":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043d\u0430\u0442 post - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u0443","title":"/rooms/"},{"location":"endpoints/endpoints/#roomsid","text":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u0443 update - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u0443 patch - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u0443 delete - \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u0443","title":"/rooms/:id/"},{"location":"endpoints/endpoints/#clients","text":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 post - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430","title":"/clients/"},{"location":"endpoints/endpoints/#clientsid","text":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 update - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 patch - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 delete - \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430","title":"/clients/:id/"},{"location":"endpoints/endpoints/#cleanings","text":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u043e\u0432 post - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430","title":"/cleanings/"},{"location":"endpoints/endpoints/#cleaningsid","text":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 update - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 patch - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 delete - \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430","title":"/cleanings/:id/"},{"location":"endpoints/endpoints/#inhabitations","text":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f post - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u0435","title":"/inhabitations/"},{"location":"endpoints/endpoints/#inhabitationsid","text":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b: get - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u0435 update - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u0435 patch - \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u0435 delete - \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u0435","title":"/inhabitations/:id/"},{"location":"semester2/lab1/1.1_containerization/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f: \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0411\u0414 Django \u0417\u0430\u0439\u0442\u0438 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 (https://www.mousedc.ru/learning/565-komanda-docker-konteyner/) Backend Dockerfile FROM python:3.8 # set work directory WORKDIR /app # set environment variables ENV PYTHONDONTWRITEBYTECODE 1 ENV PYTHONUNBUFFERED 1 RUN apt update && apt install -y postgresql gcc python3 musl-dev # install dependencies RUN pip install --upgrade pip COPY ./requirements.txt . RUN pip install -r requirements.txt # copy project COPY . /app CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\" ] Frontend Dockerfile FROM node:16.13 WORKDIR /app COPY ./package.json ./ RUN npm install COPY ./ ./ CMD [\"npm\", \"run\", \"serve\"] . . # RUN npm run build EXPOSE 8080 CMD npm run serve \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438","title":"1.1 Containerization"},{"location":"semester2/lab1/1.1_containerization/#_1","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f: \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0411\u0414 Django \u0417\u0430\u0439\u0442\u0438 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 (https://www.mousedc.ru/learning/565-komanda-docker-konteyner/)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"semester2/lab1/1.1_containerization/#backend-dockerfile","text":"FROM python:3.8 # set work directory WORKDIR /app # set environment variables ENV PYTHONDONTWRITEBYTECODE 1 ENV PYTHONUNBUFFERED 1 RUN apt update && apt install -y postgresql gcc python3 musl-dev # install dependencies RUN pip install --upgrade pip COPY ./requirements.txt . RUN pip install -r requirements.txt # copy project COPY . /app CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\" ]","title":"Backend Dockerfile"},{"location":"semester2/lab1/1.1_containerization/#frontend-dockerfile","text":"FROM node:16.13 WORKDIR /app COPY ./package.json ./ RUN npm install COPY ./ ./ CMD [\"npm\", \"run\", \"serve\"] . . # RUN npm run build EXPOSE 8080 CMD npm run serve \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438","title":"Frontend Dockerfile"},{"location":"semester2/lab1/1.2_orchestration/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0435 \u0432\u0441\u0435\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438\u0437 3 \u0438 4 \u0440\u0430\u0431\u043e\u0442\u044b \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0411\u0414 Postgres. \u0421 \u043f\u043e\u043f\u043e\u0449\u044c\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0411\u0414 \u0438\u0437 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414 (Valentina DB). Docker-compose file version: '3' services: back: container_name: dogs_back build: ./back command: bash -c \" python3 manage.py makemigrations && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000\"; ports: - '8000:8000' depends_on: - db front: container_name: dogs_front build: ./front/dog_front ports: - '8080:8080' depends_on: - back db: container_name: dogs_db image: postgres environment: POSTGRES_DB: postgres POSTGRES_USER: postgres POSTGRES_PASSWORD: postgres ports: - '5432:5432' volumes: - ./dbs/postgres-data:/var/lib/postgresql pgadmin: container_name: pg_admin4 image: dpage/pgadmin4 environment: PGADMIN_DEFAULT_EMAIL: postgres@user.com PGADMIN_DEFAULT_PASSWORD: postgres ports: - '5050:80' depends_on: - db volumes: pgdata: \u0414\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f postgresql \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0432 settings.py: DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': 'postgres', 'USER': 'postgres', 'PASSWORD': '*********', 'HOST': 'db', 'PORT': '5432', } } \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0411\u0414 Postgres. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0411\u0414 \u0438\u0437 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414 (\u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 - \u044d\u0442\u043e Valentina DB). \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u0411\u0414 \u043f\u043e\u043b\u0443\u0447\u0435\u043d:","title":"1.2 Orchestration"},{"location":"semester2/lab1/1.2_orchestration/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0435 \u0432\u0441\u0435\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438\u0437 3 \u0438 4 \u0440\u0430\u0431\u043e\u0442\u044b \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0411\u0414 Postgres. \u0421 \u043f\u043e\u043f\u043e\u0449\u044c\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0411\u0414 \u0438\u0437 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414 (Valentina DB).","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"semester2/lab1/1.2_orchestration/#docker-compose-file","text":"version: '3' services: back: container_name: dogs_back build: ./back command: bash -c \" python3 manage.py makemigrations && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000\"; ports: - '8000:8000' depends_on: - db front: container_name: dogs_front build: ./front/dog_front ports: - '8080:8080' depends_on: - back db: container_name: dogs_db image: postgres environment: POSTGRES_DB: postgres POSTGRES_USER: postgres POSTGRES_PASSWORD: postgres ports: - '5432:5432' volumes: - ./dbs/postgres-data:/var/lib/postgresql pgadmin: container_name: pg_admin4 image: dpage/pgadmin4 environment: PGADMIN_DEFAULT_EMAIL: postgres@user.com PGADMIN_DEFAULT_PASSWORD: postgres ports: - '5050:80' depends_on: - db volumes: pgdata: \u0414\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f postgresql \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0432 settings.py: DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': 'postgres', 'USER': 'postgres', 'PASSWORD': '*********', 'HOST': 'db', 'PORT': '5432', } } \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0411\u0414 Postgres. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0411\u0414 \u0438\u0437 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414 (\u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 - \u044d\u0442\u043e Valentina DB). \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u0411\u0414 \u043f\u043e\u043b\u0443\u0447\u0435\u043d:","title":"Docker-compose file"},{"location":"semester2/lab2/2.1.1_manual_filters/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.1.1 \u0420\u0435\u0430\u043b\u0438\u0437\u0432\u0430\u0442\u044c \u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 url \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0434\u0430\u043b\u0435\u0435 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0442\u044c \u043c\u0435\u0442\u043e\u0434 list \u0438\u043b\u0438 get_queryset, c \u0446\u0435\u043b\u044c\u044e \u0432\u0437\u044f\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043d\u0438\u043c\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c responce \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e): \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. (GET, ListAPIView) \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. (GET, ListAPIView) \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d \u0438 \u043d\u0435\u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d. (GET, ListAPIView) \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: path('rooms/floor/<int:floor>/', RoomFloorFilterView.as_view()), path('rooms/number/<int:num_g>/<int:num_l>/', RoomNumbersFilterView.as_view()), path('rooms/floor-room-type/<int:floor>/<int:room_type>/', RoomFloorRoomTypeFilterView.as_view()) \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: path('rooms/floor/', RoomFloorFilterView.as_view()), path('rooms/number/', RoomNumbersFilterView.as_view()), path('rooms/floor-room-type/', RoomFloorRoomTypeFilterView.as_view()) \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043d\u0430\u0442 \u043f\u043e \u044d\u0442\u0430\u0436\u0430\u043c: class RoomFloorFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] def get_queryset(self): queryset = self.queryset.filter(floor=self.kwargs['floor']) return queryset \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043d\u0430\u0442 \u043f\u043e \u044d\u0442\u0430\u0436\u0430\u043c \u0447\u0435\u0440\u0435\u0437 get \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: class RoomFloorFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] def get_queryset(self): queryset = self.queryset floor = self.request.query_params.get('floor') if floor: queryset = queryset.filter(floor=floor) return queryset \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043a\u043e\u043c\u043d\u0430\u0442: class RoomNumbersFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] def get_queryset(self): queryset = self.queryset.filter(number__gte=self.kwargs['num_g'], number__lte=self.kwargs['num_l']) return queryset \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043a\u043e\u043c\u043d\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 get \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: class RoomNumbersFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] pagination_class = PageNumberPagination def get_queryset(self): queryset = Room.objects.all() number__gte = self.request.query_params.get('num_g') number__lte = self.request.query_params.get('num_l') if number__gte and number__lte: queryset = queryset.filter(number__gte=number__gte, number__lte=number__lte) return queryset \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043f\u043e \u044d\u0442\u0430\u0436\u0443 \u0438 \u0442\u0438\u043f\u0443 \u043a\u043e\u043c\u043d\u0430\u0442\u044b: class RoomFloorRoomTypeFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer # permission_classes = [IsAuthenticated] def get_queryset(self): queryset = self.queryset.all() if not self.request.user.is_anonymous: queryset = queryset.filter(floor=self.kwargs['floor'], room_type=self.kwargs['room_type']) return queryset \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043f\u043e \u044d\u0442\u0430\u0436\u0443 \u0438 \u0442\u0438\u043f\u0443 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0447\u0435\u0440\u0435\u0437 get \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: class RoomFloorRoomTypeFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer # permission_classes = [IsAuthenticated] def get_queryset(self): queryset = self.queryset.all() if not self.request.user.is_anonymous: floor = self.request.query_params.get('floor') room_type = self.request.query_params.get('room_type') if floor: queryset = queryset.filter(floor=floor) if room_type: queryset = queryset.filter(room_type=room_type) return queryset","title":"2.1.1 Manual filters"},{"location":"semester2/lab2/2.1.1_manual_filters/#211","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0432\u0430\u0442\u044c \u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 url \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0434\u0430\u043b\u0435\u0435 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0442\u044c \u043c\u0435\u0442\u043e\u0434 list \u0438\u043b\u0438 get_queryset, c \u0446\u0435\u043b\u044c\u044e \u0432\u0437\u044f\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043d\u0438\u043c\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c responce \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e): \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. (GET, ListAPIView) \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. (GET, ListAPIView) \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d \u0438 \u043d\u0435\u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d. (GET, ListAPIView)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.1.1"},{"location":"semester2/lab2/2.1.1_manual_filters/#_1","text":"path('rooms/floor/<int:floor>/', RoomFloorFilterView.as_view()), path('rooms/number/<int:num_g>/<int:num_l>/', RoomNumbersFilterView.as_view()), path('rooms/floor-room-type/<int:floor>/<int:room_type>/', RoomFloorRoomTypeFilterView.as_view())","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b:"},{"location":"semester2/lab2/2.1.1_manual_filters/#_2","text":"path('rooms/floor/', RoomFloorFilterView.as_view()), path('rooms/number/', RoomNumbersFilterView.as_view()), path('rooms/floor-room-type/', RoomFloorRoomTypeFilterView.as_view())","title":"\u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b:"},{"location":"semester2/lab2/2.1.1_manual_filters/#_3","text":"class RoomFloorFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] def get_queryset(self): queryset = self.queryset.filter(floor=self.kwargs['floor']) return queryset","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043d\u0430\u0442 \u043f\u043e \u044d\u0442\u0430\u0436\u0430\u043c:"},{"location":"semester2/lab2/2.1.1_manual_filters/#get","text":"class RoomFloorFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] def get_queryset(self): queryset = self.queryset floor = self.request.query_params.get('floor') if floor: queryset = queryset.filter(floor=floor) return queryset","title":"\u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043d\u0430\u0442 \u043f\u043e \u044d\u0442\u0430\u0436\u0430\u043c \u0447\u0435\u0440\u0435\u0437 get \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b:"},{"location":"semester2/lab2/2.1.1_manual_filters/#_4","text":"class RoomNumbersFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] def get_queryset(self): queryset = self.queryset.filter(number__gte=self.kwargs['num_g'], number__lte=self.kwargs['num_l']) return queryset","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043a\u043e\u043c\u043d\u0430\u0442:"},{"location":"semester2/lab2/2.1.1_manual_filters/#get_1","text":"class RoomNumbersFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer permission_classes = [IsAuthenticated] pagination_class = PageNumberPagination def get_queryset(self): queryset = Room.objects.all() number__gte = self.request.query_params.get('num_g') number__lte = self.request.query_params.get('num_l') if number__gte and number__lte: queryset = queryset.filter(number__gte=number__gte, number__lte=number__lte) return queryset","title":"\u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043a\u043e\u043c\u043d\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 get \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b:"},{"location":"semester2/lab2/2.1.1_manual_filters/#_5","text":"class RoomFloorRoomTypeFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer # permission_classes = [IsAuthenticated] def get_queryset(self): queryset = self.queryset.all() if not self.request.user.is_anonymous: queryset = queryset.filter(floor=self.kwargs['floor'], room_type=self.kwargs['room_type']) return queryset","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043f\u043e \u044d\u0442\u0430\u0436\u0443 \u0438 \u0442\u0438\u043f\u0443 \u043a\u043e\u043c\u043d\u0430\u0442\u044b:"},{"location":"semester2/lab2/2.1.1_manual_filters/#get_2","text":"class RoomFloorRoomTypeFilterView(ListAPIView): queryset = Room.objects.all() serializer_class = RoomSerializer # permission_classes = [IsAuthenticated] def get_queryset(self): queryset = self.queryset.all() if not self.request.user.is_anonymous: floor = self.request.query_params.get('floor') room_type = self.request.query_params.get('room_type') if floor: queryset = queryset.filter(floor=floor) if room_type: queryset = queryset.filter(room_type=room_type) return queryset","title":"\u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043f\u043e \u044d\u0442\u0430\u0436\u0443 \u0438 \u0442\u0438\u043f\u0443 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0447\u0435\u0440\u0435\u0437 get \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b:"},{"location":"semester2/lab2/2.1.2_auto_filters/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.1.2 \u0420\u0435\u0430\u043b\u0438\u0437\u0432\u0430\u0442\u044c \u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 django-filters: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0435, \u043f\u043e\u0438\u0441\u043a, \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0446\u0435\u043d, \u0434\u0430\u0442 \u0438\u043b\u0438 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u043c django-filters \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'] \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0435 \u0443\u0431\u043e\u0440\u043a\u0438, \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 (\u0441\u0432\u044f\u0437\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430), \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0434\u043d\u044e \u0443\u0431\u043e\u0440\u043a\u0438 \u0438 \u043f\u043e \u0443\u0431\u0438\u0440\u0430\u0435\u043c\u043e\u043c\u0443 \u044d\u0442\u0430\u0436\u0443: class CleaningViewSet(ModelViewSet): queryset = Cleaning.objects.all() serializer_class = CleaningSerializer permission_classes = [IsAuthenticated] filter_backends = (DjangoFilterBackend, OrderingFilter, SearchFilter,) filter_fields = ['cleaner__full_name'] search_fields = ['cleaning_day', 'cleaning_floor'] ordering_fields = ['cleaning_day'] ordering = ['cleaning_day'] \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0434\u0430\u0442 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f: class InhabitationViewSet(ModelViewSet): queryset = Inhabitation.objects.all() serializer_class = InhabitationSerializer permission_classes = [IsAuthenticated] filter_backends = [DjangoFilterBackend, OrderingFilter] filterset_class = DateFilter ordering_fields = ['in_date'] ordering = ['in_date'] pagination_class = StandardResultsSetPagination","title":"2.1.2 Auto filters"},{"location":"semester2/lab2/2.1.2_auto_filters/#212","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0432\u0430\u0442\u044c \u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 django-filters: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0435, \u043f\u043e\u0438\u0441\u043a, \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0446\u0435\u043d, \u0434\u0430\u0442 \u0438\u043b\u0438 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.1.2"},{"location":"semester2/lab2/2.1.2_auto_filters/#django-filters","text":"'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u043c django-filters \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e:"},{"location":"semester2/lab2/2.1.2_auto_filters/#_1","text":"class CleaningViewSet(ModelViewSet): queryset = Cleaning.objects.all() serializer_class = CleaningSerializer permission_classes = [IsAuthenticated] filter_backends = (DjangoFilterBackend, OrderingFilter, SearchFilter,) filter_fields = ['cleaner__full_name'] search_fields = ['cleaning_day', 'cleaning_floor'] ordering_fields = ['cleaning_day'] ordering = ['cleaning_day']","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0435 \u0443\u0431\u043e\u0440\u043a\u0438, \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 (\u0441\u0432\u044f\u0437\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430), \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0434\u043d\u044e \u0443\u0431\u043e\u0440\u043a\u0438 \u0438 \u043f\u043e \u0443\u0431\u0438\u0440\u0430\u0435\u043c\u043e\u043c\u0443 \u044d\u0442\u0430\u0436\u0443:"},{"location":"semester2/lab2/2.1.2_auto_filters/#_2","text":"class InhabitationViewSet(ModelViewSet): queryset = Inhabitation.objects.all() serializer_class = InhabitationSerializer permission_classes = [IsAuthenticated] filter_backends = [DjangoFilterBackend, OrderingFilter] filterset_class = DateFilter ordering_fields = ['in_date'] ordering = ['in_date'] pagination_class = StandardResultsSetPagination","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0434\u0430\u0442 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f:"},{"location":"semester2/lab2/2.2.1_pagination/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.2.1 \u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0432 \u0412\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435. \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e: 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 5","title":"2.2.1 Pagination"},{"location":"semester2/lab2/2.2.1_pagination/#221","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0432 \u0412\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.2.1"},{"location":"semester2/lab2/2.2.1_pagination/#_1","text":"'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 5","title":"\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e:"},{"location":"semester2/lab2/2.2.2_custom_pagination/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.2.2 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439, \u043a\u0440\u043e\u043c\u0435 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430 \u0432\u0435\u0440\u043d\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438: class StandardResultsSetPagination(PageNumberPagination): page_size = 5 page_size_query_param = 'page_size' def get_paginated_response(self, data): return Response({ 'links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, 'count': self.page.paginator.num_pages, 'page': self.page.number, 'results': data }) \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043e \u0432\u044c\u044e: pagination_class = StandardResultsSetPagination \u041f\u0440\u0438\u043c\u0435\u0440: class InhabitationViewSet(ModelViewSet): queryset = Inhabitation.objects.all() serializer_class = InhabitationSerializer permission_classes = [IsAuthenticated] filter_backends = [DjangoFilterBackend, OrderingFilter] filterset_class = DateFilter ordering_fields = ['in_date'] ordering = ['in_date'] pagination_class = StandardResultsSetPagination","title":"2.2.2 Custom pagination"},{"location":"semester2/lab2/2.2.2_custom_pagination/#222","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439, \u043a\u0440\u043e\u043c\u0435 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430 \u0432\u0435\u0440\u043d\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.2.2"},{"location":"semester2/lab2/2.2.2_custom_pagination/#_1","text":"class StandardResultsSetPagination(PageNumberPagination): page_size = 5 page_size_query_param = 'page_size' def get_paginated_response(self, data): return Response({ 'links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, 'count': self.page.paginator.num_pages, 'page': self.page.number, 'results': data })","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438:"},{"location":"semester2/lab2/2.2.2_custom_pagination/#_2","text":"pagination_class = StandardResultsSetPagination","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043e \u0432\u044c\u044e:"},{"location":"semester2/lab2/2.2.2_custom_pagination/#_3","text":"class InhabitationViewSet(ModelViewSet): queryset = Inhabitation.objects.all() serializer_class = InhabitationSerializer permission_classes = [IsAuthenticated] filter_backends = [DjangoFilterBackend, OrderingFilter] filterset_class = DateFilter ordering_fields = ['in_date'] ordering = ['in_date'] pagination_class = StandardResultsSetPagination","title":"\u041f\u0440\u0438\u043c\u0435\u0440:"},{"location":"semester2/lab2/2.3.1_file_upload_validation/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.3.1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: \u0415\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u043d\u0430 \u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0438\u043c\u0435\u043d\u0438 \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u0415\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432. \u041c\u043e\u0434\u0435\u043b\u044c \u0444\u0430\u0439\u043b\u0430 - \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430: class UploadAvatarClient(ViewSet): queryset = CleanerAvatar.objects.all() serializer_class = CleanerAvatarSerializer permission_classes = [IsAuthenticated] def create(self, request, *args, **kwargs): file_uploaded = request.FILES.get('file_uploaded') cleaner = request.POST.get('cleaner') content_type = file_uploaded.content_type file_name = file_uploaded.name file_size = file_uploaded.size serializer = self.serializer_class(data={\"file\": file_uploaded, \"cleaner\": cleaner, \"file_size\": file_size}) serializer.is_valid() serializer.save(file_name=file_name) response = f\"POST API and you have uploaded a {content_type} file {file_name}\" return Response(response) \u0412\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440: @deconstructible class FileValidator(object): error_messages = { 'max_size': (\"Ensure this file size is not greater than %(max_size)s.\" \" Your file size is %(size)s.\"), 'min_size': (\"Ensure this file size is not less than %(min_size)s. \" \"Your file size is %(size)s.\"), 'content_type': \"Files of type %(content_type)s are not supported.\", } def __init__(self, max_size=None, min_size=None, content_types=()): self.max_size = max_size self.min_size = min_size self.content_types = content_types def __call__(self, data): if self.max_size is not None and data.size > self.max_size: params = { 'max_size': filesizeformat(self.max_size), 'size': filesizeformat(data.size), } raise ValidationError(self.error_messages['max_size'], 'max_size', params) if self.min_size is not None and data.size < self.min_size: params = { 'min_size': filesizeformat(self.min_size), 'size': filesizeformat(data.size) } raise ValidationError(self.error_messages['min_size'], 'min_size', params) if self.content_types: content_type = magic.from_buffer(data.read(), mime=True) data.seek(0) if content_type not in self.content_types: params = {'content_type': content_type} raise ValidationError(self.error_messages['content_type'], 'content_type', params) def __eq__(self, other): return ( isinstance(other, FileValidator) and self.max_size == other.max_size and self.min_size == other.min_size and self.content_types == other.content_types ) file_validator = FileValidator(max_size=1024 * 100, content_types=(\"image/jpeg\",)) class FileUploads(models.Model): file = models.FileField(validators=[file_validator]) \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0430\u0432\u0430\u0442\u0430\u0440\u0430: class CleanerAvatarSerializer(ModelSerializer): file = serializers.FileField() class Meta: model = CleanerAvatar fields = ['file', 'cleaner', 'file_size'] \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u043e\u0432: class FileUploadsSerializer(ModelSerializer): class Meta: model = FileUploads fields = ['file'] \u0412\u044c\u044e \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430: class UploadAvatarClient(ViewSet): queryset = CleanerAvatar.objects.all() serializer_class = CleanerAvatarSerializer permission_classes = [IsAuthenticated] def create(self, request, *args, **kwargs): file_uploaded = request.FILES.get('file_uploaded') cleaner = request.POST.get('cleaner') content_type = file_uploaded.content_type file_name = file_uploaded.name file_size = file_uploaded.size serializer = self.serializer_class(data={\"file\": file_uploaded, \"cleaner\": cleaner, \"file_size\": file_size}) serializer.is_valid() serializer.save(file_name=file_name) response = f\"POST API and you have uploaded a {content_type} file {file_name}\" return Response(response) \u0412\u044c\u044e \u0434\u043b\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432: class UploadFiles(ViewSet): queryset = CleanerAvatar.objects.all() serializer_class = FileUploadsSerializer permission_classes = [IsAuthenticated] def create(self, request): files = request.FILES.getlist('file') file_serializers = [] for file in files: print(file) serializer = self.serializer_class(data={\"file\": file}) try: serializer.is_valid(raise_exception=True) file_serializers.append(serializer) except ValidationError as err: return HttpResponseBadRequest(err) for serializer in file_serializers: serializer.save() response = f\"POST API and yo \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430: \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0432\u0443\u0445 \u0444\u0430\u0439\u043b\u043e\u0432: \u041e\u0448\u0438\u0431\u043a\u0438:","title":"2.3.1 File upload & validation"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#231","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: \u0415\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u043d\u0430 \u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0438\u043c\u0435\u043d\u0438 \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u0415\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.3.1"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#-","text":"class UploadAvatarClient(ViewSet): queryset = CleanerAvatar.objects.all() serializer_class = CleanerAvatarSerializer permission_classes = [IsAuthenticated] def create(self, request, *args, **kwargs): file_uploaded = request.FILES.get('file_uploaded') cleaner = request.POST.get('cleaner') content_type = file_uploaded.content_type file_name = file_uploaded.name file_size = file_uploaded.size serializer = self.serializer_class(data={\"file\": file_uploaded, \"cleaner\": cleaner, \"file_size\": file_size}) serializer.is_valid() serializer.save(file_name=file_name) response = f\"POST API and you have uploaded a {content_type} file {file_name}\" return Response(response)","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0444\u0430\u0439\u043b\u0430 - \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430:"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#_1","text":"@deconstructible class FileValidator(object): error_messages = { 'max_size': (\"Ensure this file size is not greater than %(max_size)s.\" \" Your file size is %(size)s.\"), 'min_size': (\"Ensure this file size is not less than %(min_size)s. \" \"Your file size is %(size)s.\"), 'content_type': \"Files of type %(content_type)s are not supported.\", } def __init__(self, max_size=None, min_size=None, content_types=()): self.max_size = max_size self.min_size = min_size self.content_types = content_types def __call__(self, data): if self.max_size is not None and data.size > self.max_size: params = { 'max_size': filesizeformat(self.max_size), 'size': filesizeformat(data.size), } raise ValidationError(self.error_messages['max_size'], 'max_size', params) if self.min_size is not None and data.size < self.min_size: params = { 'min_size': filesizeformat(self.min_size), 'size': filesizeformat(data.size) } raise ValidationError(self.error_messages['min_size'], 'min_size', params) if self.content_types: content_type = magic.from_buffer(data.read(), mime=True) data.seek(0) if content_type not in self.content_types: params = {'content_type': content_type} raise ValidationError(self.error_messages['content_type'], 'content_type', params) def __eq__(self, other): return ( isinstance(other, FileValidator) and self.max_size == other.max_size and self.min_size == other.min_size and self.content_types == other.content_types ) file_validator = FileValidator(max_size=1024 * 100, content_types=(\"image/jpeg\",)) class FileUploads(models.Model): file = models.FileField(validators=[file_validator])","title":"\u0412\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440:"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#_2","text":"class CleanerAvatarSerializer(ModelSerializer): file = serializers.FileField() class Meta: model = CleanerAvatar fields = ['file', 'cleaner', 'file_size']","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0430\u0432\u0430\u0442\u0430\u0440\u0430:"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#_3","text":"class FileUploadsSerializer(ModelSerializer): class Meta: model = FileUploads fields = ['file']","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u043e\u0432:"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#_4","text":"class UploadAvatarClient(ViewSet): queryset = CleanerAvatar.objects.all() serializer_class = CleanerAvatarSerializer permission_classes = [IsAuthenticated] def create(self, request, *args, **kwargs): file_uploaded = request.FILES.get('file_uploaded') cleaner = request.POST.get('cleaner') content_type = file_uploaded.content_type file_name = file_uploaded.name file_size = file_uploaded.size serializer = self.serializer_class(data={\"file\": file_uploaded, \"cleaner\": cleaner, \"file_size\": file_size}) serializer.is_valid() serializer.save(file_name=file_name) response = f\"POST API and you have uploaded a {content_type} file {file_name}\" return Response(response)","title":"\u0412\u044c\u044e \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430:"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#_5","text":"class UploadFiles(ViewSet): queryset = CleanerAvatar.objects.all() serializer_class = FileUploadsSerializer permission_classes = [IsAuthenticated] def create(self, request): files = request.FILES.getlist('file') file_serializers = [] for file in files: print(file) serializer = self.serializer_class(data={\"file\": file}) try: serializer.is_valid(raise_exception=True) file_serializers.append(serializer) except ValidationError as err: return HttpResponseBadRequest(err) for serializer in file_serializers: serializer.save() response = f\"POST API and yo","title":"\u0412\u044c\u044e \u0434\u043b\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432:"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#_6","text":"","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430:"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#_7","text":"","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0432\u0443\u0445 \u0444\u0430\u0439\u043b\u043e\u0432:"},{"location":"semester2/lab2/2.3.1_file_upload_validation/#_8","text":"","title":"\u041e\u0448\u0438\u0431\u043a\u0438:"},{"location":"semester2/lab2/2.4.1_signals/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.4.1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c 3 \u0441\u0438\u0433\u043d\u0430\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435: \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443, \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u0430\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043b\u044e\u0431\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. \u0414\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e ready \u0432 apps.py: class HotelAppConfig(AppConfig): default_auto_field = 'django.db.models.BigAutoField' name = 'hotel_app' def ready(self): import hotel_app.signals super().ready() \u0421\u0438\u0433\u043d\u0430\u043b 1: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430: @receiver(post_save, sender=Cleaner) def save_logic(sender, instance, created, **kwargs): if created: print(\"Some logic\") \u0421\u0438\u0433\u043d\u0430\u043b 2: \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043d\u043e\u043c\u0435\u0440\u0430\u0445 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0441\u0442\u0430\u0440\u043e\u0433\u043e \u043d\u043e\u043c\u0435\u0440\u0430: \u0412 \u043c\u043e\u0434\u0435\u043b\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u043f\u043e\u043b\u0435 previous_vaccination @receiver(pre_save, sender=Cleaner) def update(sender, instance, **kwargs): try: prev_instance = Cleaner.objects.get(id=instance.id) instance.old_phone = prev_instance.phone except: pass \u041f\u043e\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u0435\u043b\u0435\u0444\u043e\u043d \u0435\u0449\u0451 \u0440\u0430\u0437: \u0421\u0438\u0433\u043d\u0430\u043b 3: \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 \u0438 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: @receiver(post_delete, sender=Cleaner) def delete_log(sender, instance, **kwargs): print(f\"Delete {instance.full_name}\")","title":"2.4.1 Signals"},{"location":"semester2/lab2/2.4.1_signals/#241","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c 3 \u0441\u0438\u0433\u043d\u0430\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435: \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443, \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u0430\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043b\u044e\u0431\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.4.1"},{"location":"semester2/lab2/2.4.1_signals/#ready-appspy","text":"class HotelAppConfig(AppConfig): default_auto_field = 'django.db.models.BigAutoField' name = 'hotel_app' def ready(self): import hotel_app.signals super().ready()","title":"\u0414\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e ready \u0432 apps.py:"},{"location":"semester2/lab2/2.4.1_signals/#1","text":"@receiver(post_save, sender=Cleaner) def save_logic(sender, instance, created, **kwargs): if created: print(\"Some logic\")","title":"\u0421\u0438\u0433\u043d\u0430\u043b 1: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430:"},{"location":"semester2/lab2/2.4.1_signals/#2","text":"\u0412 \u043c\u043e\u0434\u0435\u043b\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u043f\u043e\u043b\u0435 previous_vaccination @receiver(pre_save, sender=Cleaner) def update(sender, instance, **kwargs): try: prev_instance = Cleaner.objects.get(id=instance.id) instance.old_phone = prev_instance.phone except: pass","title":"\u0421\u0438\u0433\u043d\u0430\u043b 2: \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043d\u043e\u043c\u0435\u0440\u0430\u0445 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0441\u0442\u0430\u0440\u043e\u0433\u043e \u043d\u043e\u043c\u0435\u0440\u0430:"},{"location":"semester2/lab2/2.4.1_signals/#_1","text":"","title":"\u041f\u043e\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u0435\u043b\u0435\u0444\u043e\u043d \u0435\u0449\u0451 \u0440\u0430\u0437:"},{"location":"semester2/lab2/2.4.1_signals/#3","text":"@receiver(post_delete, sender=Cleaner) def delete_log(sender, instance, **kwargs): print(f\"Delete {instance.full_name}\")","title":"\u0421\u0438\u0433\u043d\u0430\u043b 3: \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0443\u0431\u043e\u0440\u0449\u0438\u043a\u0430 \u0438 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435:"},{"location":"semester2/lab3/3.1.1_tests/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0432 \u0412\u0430\u0448\u0435\u043c API (3 \u0442\u0430\u0431\u043b\u0438\u0446\u044b) \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u0435\u043d\u0434\u043f\u0438\u043d\u0442\u044b \u0432 \u0412\u0430\u0448\u0435\u043c API (3 GET \u0437\u0430\u043f\u0440\u043e\u0441\u0430, 3 POST \u0437\u0430\u043f\u0440\u043e\u0441\u0430, 3 PATHC \u0437\u0430\u043f\u0440\u043e\u0441\u0430) \u041a\u043e\u0434 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 import json from django.test import TestCase from rest_framework import status from django.urls import reverse from hotel_app.models import Room, Client, Cleaner class RoomModelTest(TestCase): @classmethod def setUpTestData(cls): Room.objects.create(number=1, floor=1, cost_of_living=1, room_type=1) def test_number_label(self): room = Room.objects.get(id=1) field_label = room._meta.get_field('number').verbose_name self.assertEquals(field_label, '\u043d\u043e\u043c\u0435\u0440') def test_floor_label(self): room = Room.objects.get(id=1) field_label = room._meta.get_field('floor').verbose_name self.assertEquals(field_label, '\u044d\u0442\u0430\u0436') def test_cost_of_living_label(self): room = Room.objects.get(id=1) field_label = room._meta.get_field('cost_of_living').verbose_name self.assertEquals(field_label, '\u0446\u0435\u043d\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f') def test_room_type_label(self): room = Room.objects.get(id=1) field_label = room._meta.get_field('room_type').verbose_name self.assertEquals(field_label, '\u0442\u0438\u043f \u043a\u043e\u043c\u043d\u0430\u0442\u044b') def test_get_room(self): url = reverse('room-detail', args=[1]) data = {\"id\": 1, \"number\": 1, \"floor\": 1, \"cost_of_living\": 1, \"room_type\": 1} response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) def test_post_room(self): url = reverse('room-list') data = {\"id\": 2, \"number\": 1, \"floor\": 1, \"cost_of_living\": 1, \"room_type\": 1} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) def test_put_room(self): url = reverse('room-detail', args=[1]) data = {\"id\": 1, \"number\": 2, \"floor\": 1, \"cost_of_living\": 1, \"room_type\": 1} response = self.client.put(url, data=data, content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) class ClientModelTest(TestCase): @classmethod def setUpTestData(cls): Client.objects.create(full_name=\"Ivan\", pasport=\"123456\", city=\"Moscow\") def test_full_name_label(self): client = Client.objects.get(id=1) field_label = client._meta.get_field('full_name').verbose_name self.assertEquals(field_label, '\u0438\u043c\u044f') def test_pasport_label(self): client = Client.objects.get(id=1) field_label = client._meta.get_field('pasport').verbose_name self.assertEquals(field_label, '\u043f\u0430\u0441\u043f\u043e\u0440\u0442') def test_city_label(self): client = Client.objects.get(id=1) field_label = client._meta.get_field('city').verbose_name self.assertEquals(field_label, '\u0433\u043e\u0440\u043e\u0434') def test_get_client(self): url = reverse('client-detail', args=[1]) data = {\"id\": 1, \"full_name\": \"Ivan\", \"pasport\": \"123456\", \"city\": \"Moscow\", \"rooms\": []} response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) def test_post_client(self): url = reverse('client-list') data = {\"id\": 2, \"full_name\": \"Ivan\", \"pasport\": \"123456\", \"city\": \"Moscow\", \"rooms\": []} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) def test_put_client(self): url = reverse('client-detail', args=[1]) data = {\"id\": 1, \"full_name\": \"Igor\", \"pasport\": \"654321\", \"city\": \"Moscow\", \"rooms\": []} response = self.client.put(url, data=data, content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) class CleanerModelTest(TestCase): @classmethod def setUpTestData(cls): Cleaner.objects.create(full_name=\"Ivan\", phone=\"88005553535\", contract_number=\"123456\", old_phone=\"88125553535\") def test_full_name_label(self): cleaner = Cleaner.objects.get(id=1) field_label = cleaner._meta.get_field('full_name').verbose_name self.assertEquals(field_label, '\u0424\u0418\u041e') def test_phone_label(self): cleaner = Cleaner.objects.get(id=1) field_label = cleaner._meta.get_field('phone').verbose_name self.assertEquals(field_label, '\u0422\u0435\u043b\u0435\u0444\u043e\u043d') def test_contract_number_label(self): cleaner = Cleaner.objects.get(id=1) field_label = cleaner._meta.get_field('contract_number').verbose_name self.assertEquals(field_label, '\u0414\u043e\u0433\u043e\u0432\u043e\u0440') def test_old_phone_label(self): cleaner = Cleaner.objects.get(id=1) field_label = cleaner._meta.get_field('old_phone').verbose_name self.assertEquals(field_label, '\u0421\u0442\u0430\u0440\u044b\u0439 \u0442\u0435\u043b\u0435\u0444\u043e\u043d') def test_get_cleaner(self): url = reverse('cleaner-detail', args=[1]) data = {\"id\": 1, \"full_name\": \"Ivan\", \"phone\": \"88005553535\", \"contract_number\": \"123456\", \"old_phone\": \"88005553535\"} response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) def test_post_cleaner(self): url = reverse('cleaner-list') data = {\"id\": 2, \"full_name\": \"Igor\", \"phone\": \"88125553535\", \"contract_number\": \"123456\", \"old_phone\": \"88125553535\"} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) def test_put_cleaner(self): url = reverse('cleaner-detail', args=[1]) data = {\"id\": 1, \"full_name\": \"Igor\", \"phone\": \"88125553535\", \"contract_number\": \"123456\", \"old_phone\": \"88005553535\"} response = self.client.put(url, data=data, content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0442\u0435\u0441\u0442\u043e\u0432","title":"3.1.1 Tests"},{"location":"semester2/lab3/3.1.1_tests/#311","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0432 \u0412\u0430\u0448\u0435\u043c API (3 \u0442\u0430\u0431\u043b\u0438\u0446\u044b) \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u0435\u043d\u0434\u043f\u0438\u043d\u0442\u044b \u0432 \u0412\u0430\u0448\u0435\u043c API (3 GET \u0437\u0430\u043f\u0440\u043e\u0441\u0430, 3 POST \u0437\u0430\u043f\u0440\u043e\u0441\u0430, 3 PATHC \u0437\u0430\u043f\u0440\u043e\u0441\u0430)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1"},{"location":"semester2/lab3/3.1.1_tests/#_1","text":"import json from django.test import TestCase from rest_framework import status from django.urls import reverse from hotel_app.models import Room, Client, Cleaner class RoomModelTest(TestCase): @classmethod def setUpTestData(cls): Room.objects.create(number=1, floor=1, cost_of_living=1, room_type=1) def test_number_label(self): room = Room.objects.get(id=1) field_label = room._meta.get_field('number').verbose_name self.assertEquals(field_label, '\u043d\u043e\u043c\u0435\u0440') def test_floor_label(self): room = Room.objects.get(id=1) field_label = room._meta.get_field('floor').verbose_name self.assertEquals(field_label, '\u044d\u0442\u0430\u0436') def test_cost_of_living_label(self): room = Room.objects.get(id=1) field_label = room._meta.get_field('cost_of_living').verbose_name self.assertEquals(field_label, '\u0446\u0435\u043d\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f') def test_room_type_label(self): room = Room.objects.get(id=1) field_label = room._meta.get_field('room_type').verbose_name self.assertEquals(field_label, '\u0442\u0438\u043f \u043a\u043e\u043c\u043d\u0430\u0442\u044b') def test_get_room(self): url = reverse('room-detail', args=[1]) data = {\"id\": 1, \"number\": 1, \"floor\": 1, \"cost_of_living\": 1, \"room_type\": 1} response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) def test_post_room(self): url = reverse('room-list') data = {\"id\": 2, \"number\": 1, \"floor\": 1, \"cost_of_living\": 1, \"room_type\": 1} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) def test_put_room(self): url = reverse('room-detail', args=[1]) data = {\"id\": 1, \"number\": 2, \"floor\": 1, \"cost_of_living\": 1, \"room_type\": 1} response = self.client.put(url, data=data, content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) class ClientModelTest(TestCase): @classmethod def setUpTestData(cls): Client.objects.create(full_name=\"Ivan\", pasport=\"123456\", city=\"Moscow\") def test_full_name_label(self): client = Client.objects.get(id=1) field_label = client._meta.get_field('full_name').verbose_name self.assertEquals(field_label, '\u0438\u043c\u044f') def test_pasport_label(self): client = Client.objects.get(id=1) field_label = client._meta.get_field('pasport').verbose_name self.assertEquals(field_label, '\u043f\u0430\u0441\u043f\u043e\u0440\u0442') def test_city_label(self): client = Client.objects.get(id=1) field_label = client._meta.get_field('city').verbose_name self.assertEquals(field_label, '\u0433\u043e\u0440\u043e\u0434') def test_get_client(self): url = reverse('client-detail', args=[1]) data = {\"id\": 1, \"full_name\": \"Ivan\", \"pasport\": \"123456\", \"city\": \"Moscow\", \"rooms\": []} response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) def test_post_client(self): url = reverse('client-list') data = {\"id\": 2, \"full_name\": \"Ivan\", \"pasport\": \"123456\", \"city\": \"Moscow\", \"rooms\": []} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) def test_put_client(self): url = reverse('client-detail', args=[1]) data = {\"id\": 1, \"full_name\": \"Igor\", \"pasport\": \"654321\", \"city\": \"Moscow\", \"rooms\": []} response = self.client.put(url, data=data, content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) class CleanerModelTest(TestCase): @classmethod def setUpTestData(cls): Cleaner.objects.create(full_name=\"Ivan\", phone=\"88005553535\", contract_number=\"123456\", old_phone=\"88125553535\") def test_full_name_label(self): cleaner = Cleaner.objects.get(id=1) field_label = cleaner._meta.get_field('full_name').verbose_name self.assertEquals(field_label, '\u0424\u0418\u041e') def test_phone_label(self): cleaner = Cleaner.objects.get(id=1) field_label = cleaner._meta.get_field('phone').verbose_name self.assertEquals(field_label, '\u0422\u0435\u043b\u0435\u0444\u043e\u043d') def test_contract_number_label(self): cleaner = Cleaner.objects.get(id=1) field_label = cleaner._meta.get_field('contract_number').verbose_name self.assertEquals(field_label, '\u0414\u043e\u0433\u043e\u0432\u043e\u0440') def test_old_phone_label(self): cleaner = Cleaner.objects.get(id=1) field_label = cleaner._meta.get_field('old_phone').verbose_name self.assertEquals(field_label, '\u0421\u0442\u0430\u0440\u044b\u0439 \u0442\u0435\u043b\u0435\u0444\u043e\u043d') def test_get_cleaner(self): url = reverse('cleaner-detail', args=[1]) data = {\"id\": 1, \"full_name\": \"Ivan\", \"phone\": \"88005553535\", \"contract_number\": \"123456\", \"old_phone\": \"88005553535\"} response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) def test_post_cleaner(self): url = reverse('cleaner-list') data = {\"id\": 2, \"full_name\": \"Igor\", \"phone\": \"88125553535\", \"contract_number\": \"123456\", \"old_phone\": \"88125553535\"} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) def test_put_cleaner(self): url = reverse('cleaner-detail', args=[1]) data = {\"id\": 1, \"full_name\": \"Igor\", \"phone\": \"88125553535\", \"contract_number\": \"123456\", \"old_phone\": \"88005553535\"} response = self.client.put(url, data=data, content_type='application/json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data)","title":"\u041a\u043e\u0434 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432"},{"location":"semester2/lab3/3.1.1_tests/#_2","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0442\u0435\u0441\u0442\u043e\u0432"},{"location":"semester2/lab4/4.1.1_filters_interface/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4.1.1 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439. \u0412 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f. \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c. \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438. \u0444\u0438\u0442\u0440\u044b \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d. \u041c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0443 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438, \u043a\u0430\u043a \u0432 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a \u0431\u044d\u043a\u0435\u043d\u0434\u0443. crm \u043e\u0442\u0435\u043b\u044f: \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0446\u0435\u043d\u0435. \u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0442\u043e\u0436\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f: \u0412\u043a\u043b\u044e\u0447\u0435\u043d \u0444\u0438\u043b\u044c\u0442\u0440 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u0432 \u043d\u043e\u043c\u0435\u0440\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u043d\u043e\u043c\u0435\u0440\u0430: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:","title":"4.1.1 Filters interface"},{"location":"semester2/lab4/4.1.1_filters_interface/#411","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439. \u0412 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f. \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c. \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438. \u0444\u0438\u0442\u0440\u044b \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d. \u041c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0443 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438, \u043a\u0430\u043a \u0432 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a \u0431\u044d\u043a\u0435\u043d\u0434\u0443.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4.1.1"},{"location":"semester2/lab4/4.1.1_filters_interface/#crm","text":"","title":"crm \u043e\u0442\u0435\u043b\u044f:"},{"location":"semester2/lab4/4.1.1_filters_interface/#_1","text":"","title":"\u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0446\u0435\u043d\u0435. \u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0442\u043e\u0436\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f:"},{"location":"semester2/lab4/4.1.1_filters_interface/#_2","text":"","title":"\u0412\u043a\u043b\u044e\u0447\u0435\u043d \u0444\u0438\u043b\u044c\u0442\u0440 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u0432 \u043d\u043e\u043c\u0435\u0440\u0435:"},{"location":"semester2/lab4/4.1.1_filters_interface/#_3","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u043d\u043e\u043c\u0435\u0440\u0430:"},{"location":"semester2/lab4/4.1.1_filters_interface/#_4","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:"}]}